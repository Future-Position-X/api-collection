service: geo-api
provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, self:custom.defaultStage}
  region: eu-north-1
  profile: ${opt:profile, self:custom.stageVars.profile}
  memorySize: 3008
  timeout: 30
  environment:
    MAPBOX_TOKEN: ${self:custom.stageVars.environment.MAPBOX_TOKEN}
    DATABASE_URL: ${self:custom.stageVars.environment.DATABASE_URL}
    JWT_SECRET: ${self:custom.stageVars.environment.JWT_SECRET}

plugins:
  - serverless-python-requirements
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-apigw-binary
  - serverless-apigwy-binary
  - serverless-aws-documentation
  - serverless-finch
  - serverless-domain-manager

custom:
  defaultStage: dev
  stageVars: ${file(serverless/config/${self:provider.stage}.yml)}
  pythonRequirements:
    dockerizePip: true
  apigwBinary:
    types:
      - 'image/png'
      - '*/*'
  documentation:
    api: ${file(serverless/documentation/api.yml)}
    models: ${file(serverless/documentation/models.yml)}
  customDomain:
    domainName: ${self:provider.stage}.gia.fpx.se
    basePath: ''
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateName: '${self:provider.stage}.gia.fpx.se'
    
  client:
    bucketName: ${self:service}-${self:provider.stage}-static
    distributionFolder: static
package:
  exclude:
    - venv/**
    - node_modules/**
    - static/**
functions:
  - ${file(serverless/functions/collections.yml)}
  - ${file(serverless/functions/items.yml)}
  - ${file(serverless/functions/misc.yml)}

resources:
  Resources:
    ${file(serverless/resources/gatewayResponses.yml)}