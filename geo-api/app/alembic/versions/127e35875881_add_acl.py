"""Add acl

Revision ID: 127e35875881
Revises: 3bc1f1d70aca
Create Date: 2020-09-10 07:10:11.480785

"""
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "127e35875881"
down_revision = "3bc1f1d70aca"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "acls",
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "revision", sa.Integer(), server_default=sa.text("1"), nullable=False
        ),
        sa.Column("uuid", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("provider_uuid", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column(
            "granted_provider_uuid", postgresql.UUID(as_uuid=True), nullable=True
        ),
        sa.Column("granted_user_uuid", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("collection_uuid", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("item_uuid", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column(
            "access", sa.Enum("read", "write", name="permission"), nullable=False
        ),
        sa.CheckConstraint(
            "((granted_provider_uuid is not null)::integer + (granted_user_uuid is not null)::integer) = 1",
            name="check_granted",
        ),
        sa.CheckConstraint(
            "((item_uuid is not null)::integer + (collection_uuid is not null)::integer) = 1",
            name="check_granted_object",
        ),
        sa.ForeignKeyConstraint(
            ["collection_uuid"], ["collections.uuid"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["granted_provider_uuid"], ["providers.uuid"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["granted_user_uuid"], ["users.uuid"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["item_uuid"], ["items.uuid"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["provider_uuid"], ["providers.uuid"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("uuid"),
        sa.UniqueConstraint(
            "granted_provider_uuid",
            "granted_user_uuid",
            "collection_uuid",
            "item_uuid",
            "access",
        ),
        sa.UniqueConstraint("uuid"),
    )
    op.create_index(
        op.f("ix_acls_collection_uuid"), "acls", ["collection_uuid"], unique=False
    )
    op.create_index(
        op.f("ix_acls_granted_provider_uuid"),
        "acls",
        ["granted_provider_uuid"],
        unique=False,
    )
    op.create_index(
        op.f("ix_acls_granted_user_uuid"), "acls", ["granted_user_uuid"], unique=False
    )
    op.create_index(op.f("ix_acls_item_uuid"), "acls", ["item_uuid"], unique=False)
    op.create_index(
        op.f("ix_acls_provider_uuid"), "acls", ["provider_uuid"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_acls_provider_uuid"), table_name="acls")
    op.drop_index(op.f("ix_acls_item_uuid"), table_name="acls")
    op.drop_index(op.f("ix_acls_granted_user_uuid"), table_name="acls")
    op.drop_index(op.f("ix_acls_granted_provider_uuid"), table_name="acls")
    op.drop_index(op.f("ix_acls_collection_uuid"), table_name="acls")
    op.drop_table("acls")
    op.execute("DROP TYPE permission")
    # ### end Alembic commands ###
