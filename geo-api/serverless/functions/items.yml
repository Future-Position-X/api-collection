items-index:
  handler: app.handlers.geo_items.index
  events:
    - http:
        path: collections/{collection_uuid_or_name}/items
        method: get
        cors: true
        documentation:
          summary: "Get items belonging to a collection"
          description: "All accessable items belonging to collection"
          queryParams:
            - ${file(serverless/documentation/queryParams.yml):limit}
            - ${file(serverless/documentation/queryParams.yml):offset}
          pathParams:
            - ${file(serverless/documentation/pathParams.yml):collection_uuid_or_name}
          methodResponses:
            - ${file(serverless/documentation/methodResponses.yml):items}
            - ${file(serverless/documentation/methodResponses.yml):error404}
            - ${file(serverless/documentation/methodResponses.yml):error500}

items-index-as-geojson:
  handler: app.handlers.geo_items.index_as_geojson
  events:
    - http:
        path: collections/{collection_uuid_or_name}/items/geojson
        method: get
        cors: true
        documentation:
          summary: "Get items belonging to a collection as geojson FeatureCollection"
          description: "All accessable items belonging to collection as geojson FeatureCollection"
          queryParams:
            - ${file(serverless/documentation/queryParams.yml):limit}
            - ${file(serverless/documentation/queryParams.yml):offset}
          pathParams:
            - ${file(serverless/documentation/pathParams.yml):collection_uuid_or_name}
          methodResponses:
            - ${file(serverless/documentation/methodResponses.yml):featureCollection}
            - ${file(serverless/documentation/methodResponses.yml):error404}
            - ${file(serverless/documentation/methodResponses.yml):error500}


items-index-as-png:
  handler: app.handlers.geo_items.index_as_png
  events:
    - http:
        path: collections/{collection_uuid_or_name}/items/png
        method: get
        cors: true
        contentHandling: CONVERT_TO_BINARY
        documentation:
          summary: "Get items belonging to a collection rendered on a png image"
          description: "Get items belonging to a collection rendered on a png image"
          queryParams:
            - ${file(serverless/documentation/queryParams.yml):limit}
            - ${file(serverless/documentation/queryParams.yml):offset}
          pathParams:
            - ${file(serverless/documentation/pathParams.yml):collection_uuid_or_name}
          methodResponses:
            - ${file(serverless/documentation/methodResponses.yml):imagePng}
            - ${file(serverless/documentation/methodResponses.yml):error404}
            - ${file(serverless/documentation/methodResponses.yml):error500}


items-within-radius-as-geojson:
  handler: app.handlers.geo_items.get_within_radius
  events:
    - http:
        path: /items/within-radius
        method: get
        cors: true
        documentation:
          summary: "Get items within radius in meters of point as geojson FeatureCollection"
          description: "Get items within radius in meters of point as geojson FeatureCollection."
          queryParams:
            - ${file(serverless/documentation/queryParams.yml):limit}
            - ${file(serverless/documentation/queryParams.yml):offset}
            - ${file(serverless/documentation/queryParams.yml):radius}
            - ${file(serverless/documentation/queryParams.yml):coordinates}
          methodResponses:
            - ${file(serverless/documentation/methodResponses.yml):featureCollection}
            - ${file(serverless/documentation/methodResponses.yml):error404}
            - ${file(serverless/documentation/methodResponses.yml):error500}

items-get:
  handler: app.handlers.geo_items.get_as_geojson
  events:
    - http:
        path: items/{item_uuid}/geojson
        method: get
        cors: true
        documentation:
          summary: "Get item as geojson FeatureCollection"
          description: "Get item as geojson FeatureCollection."
          pathParams:
            - ${file(serverless/documentation/pathParams.yml):item_uuid}
          methodResponses:
            - ${file(serverless/documentation/methodResponses.yml):featureCollection}
            - ${file(serverless/documentation/methodResponses.yml):error404}
            - ${file(serverless/documentation/methodResponses.yml):error500}

items-get-as-png:
  handler: app.handlers.geo_items.get_as_png
  events:
    - http:
        path: items/{item_uuid}/png
        method: get
        cors: true
        contentHandling: CONVERT_TO_BINARY
        documentation:
          summary: "Get item as png image"
          description: "Get item as png image"
          pathParams:
            - ${file(serverless/documentation/pathParams.yml):item_uuid}
          methodResponses:
            - ${file(serverless/documentation/methodResponses.yml):imagePng}
            - ${file(serverless/documentation/methodResponses.yml):error404}
            - ${file(serverless/documentation/methodResponses.yml):error500}

items-delete:
  handler: app.handlers.geo_items.delete
  events:
    - http:
        path: /items/{item_uuid}
        method: delete
        cors: true
        documentation:
          summary: "Delete item"
          description: "Delete item"
          pathParams:
            - ${file(serverless/documentation/pathParams.yml):item_uuid}
          methodResponses:
            - statusCode: "204"
            - ${file(serverless/documentation/methodResponses.yml):error404}
            - ${file(serverless/documentation/methodResponses.yml):error500}

items-update:
  handler: app.handlers.geo_items.update
  events:
    - http:
        path: /items/{item_uuid}
        method: put
        cors: true
        documentation:
          summary: "Update item"
          description: "Update item"
          pathParams:
            - ${file(serverless/documentation/pathParams.yml):item_uuid}
          requestModels:
            "application/json": "UpdateItem"
          methodResponses:
            - statusCode: "204"
            - ${file(serverless/documentation/methodResponses.yml):error404}
            - ${file(serverless/documentation/methodResponses.yml):error500}
items-create:
  handler: app.handlers.geo_items.create
  events:
    - http:
        path: collections/{collection_uuid_or_name}/items
        method: post
        cors: true
        documentation:
          summary: "Create item"
          description: "Create item"
          pathParams:
            - ${file(serverless/documentation/pathParams.yml):collection_uuid_or_name}
          requestModels:
            "application/json": "CreateItem"
          methodResponses:
            - ${file(serverless/documentation/methodResponses.yml):uuid}
            - ${file(serverless/documentation/methodResponses.yml):error404}
            - ${file(serverless/documentation/methodResponses.yml):error500}

items-create-from-geojson:
  handler: app.handlers.geo_items.create_from_geojson
  events:
    - http:
        path: collections/{collection_uuid_or_name}/items/geojson
        method: post
        cors: true
        documentation:
          summary: "Remove all items in collection and add those in geojson FeatureCollection"
          description: "Remove all items in collection and add those in geojson FeatureCollection"
          pathParams:
            - ${file(serverless/documentation/pathParams.yml):collection_uuid_or_name}
          requestModels:
            "application/json": "FeatureCollection"
          methodResponses:
            - ${file(serverless/documentation/methodResponses.yml):uuids}
            - ${file(serverless/documentation/methodResponses.yml):error404}
            - ${file(serverless/documentation/methodResponses.yml):error500}


items-add-from-geojson:
  handler: app.handlers.geo_items.add_from_geojson
  events:
    - http:
        path: collections/{collection_uuid_or_name}/items/geojson
        method: put
        cors: true
        documentation:
          summary: "Add items to collection from geojson FeatureCollection"
          description: "Add items to collection from geojson FeatureCollection"
          pathParams:
            - ${file(serverless/documentation/pathParams.yml):collection_uuid_or_name}
          requestModels:
            "application/json": "FeatureCollection"
          methodResponses:
            - ${file(serverless/documentation/methodResponses.yml):uuids}
            - ${file(serverless/documentation/methodResponses.yml):error404}
            - ${file(serverless/documentation/methodResponses.yml):error500}
            
items-update-from-geojson:
  handler: app.handlers.geo_items.update_from_geojson
  events:
    - http:
        path: items/geojson
        method: put

walking-paths-generate:
  handler: app.handlers.geo_items.generate_walking_paths
  events:
    - http:
        path: collections/{collection_uuid_or_name}/items/ai/generate/walkingpaths
        method: post
        summary: Generate random walking paths using starting points from collection and polygons from another collection as environment."
        description: "Generate random walking paths using starting points from collection and polygons from another collection as environment."
        queryParams:
          - ${file(serverless/documentation/queryParams.yml):steps}
          - ${file(serverless/documentation/queryParams.yml):agents}
          - ${file(serverless/documentation/queryParams.yml):starting_points_collection_uuid}
          - ${file(serverless/documentation/queryParams.yml):environment_collection_uuid}
        pathParams:
          - ${file(serverless/documentation/pathParams.yml):collection_uuid_or_name}
